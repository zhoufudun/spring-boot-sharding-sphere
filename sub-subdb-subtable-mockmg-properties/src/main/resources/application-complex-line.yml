server:
  port: 8080

mybatis:
  config-location:
    classpath: mybatis-config.xml

spring:
  shardingsphere:
    # 数据源配置
    datasource:
      # 数据源名称，多数据源以逗号分隔 ,放在第一个的数据源为未配置分片规则表的默认数据源
      names: subdb1 , subdb2
      # 名称与上边 names 保持一致
      subdb1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/subdb1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        username: root
        password: 123456
      subdb2:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/subdb2?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        username: root
        password: 123456
    # 具体规则配置
    rules:
      sharding:
        # 自动分片表规则配置
#        auto-tables:
#          t_user_
#            actual-data-sources: subdb$->{0..1}
#            sharding-strategy:
#              standard:
#                sharding-column: age
#                sharding-algorithm-name: t_user_database_complex_inline_algorithms
        # 分片算法定义
        sharding-algorithms:
          t_user_database_complex_inline_algorithms:
            type: inline
            props:
              sharding-columns: age # 分片列名称，多个列用逗号分隔。
              algorithm-expression: subdb${(age % 2)+1} # 分片算法的行表达式
              allow-range-query-with-inline-sharding: false # 是否允许范围查询。注意：范围查询会无视分片策略，进行全路由，默认 false
          t_user_table_complex_inline:
            type: COMPLEX_INLINE
            props:
              sharding-columns: birthdayMonth, age # 分片列名称，多个列用逗号分隔。
              algorithm-expression: t_user_$->{1..2}_${0..1} # 分片算法的行表达式
              allow-range-query-with-inline-sharding: false # 是否允许范围查询。注意：范围查询会无视分片策略，进行全路由，默认 false
        # 分布式序列算法配置
#        key-generators:
#          t_order_snowflake:
#            # 分布式序列算法（雪花算法：SNOWFLAKE； UUID：UUID）（注：UUID没有props配置）
#            type: SNOWFLAKE
#            # 分布式序列算法属性配置
#            props:
#              # 工作机器唯一标识
#              worker-id: 1
        tables:
          # 逻辑表名称
          t_order:
            # 数据节点：数据库.分片表
            actual-data-nodes: subdb$->{1..2}.t_user_${0..2}
            # 分库策略
            database-strategy:
              complex:
                shardingColumns: age
                sharding-algorithm-name: t_user_database_complex_inline_algorithms
            # 分表策略
            table-strategy:
              complex:
                shardingColumns: birthdayMonth, age
                sharding-algorithm-name: t_user_table_complex_inline
#            keyGenerateStrategy:
#              column: id
#              keyGeneratorName: t_order_snowflake
    # 属性配置
    props:
      # 展示修改以后的sql语句
      sql-show: true